--------------------------------------------------------------------------------
--- @author ReyalS
--- @release 1.0
--- @license MIT
--- @description
--- Inicializa√ß√£o global do sistema de localiza√ß√£o.
--- Define fun√ß√µes globais curtas para facilitar o uso em todo o projeto.
--- Deve ser chamado no main.lua para disponibilizar as fun√ß√µes globalmente.

local LocalizationHelpers = require("src.utils.localization_helpers")

--- Valida recursivamente se uma estrutura de tradu√ß√µes est√° completa comparando com uma base
--- @param baseTable table Estrutura base (pt_BR)
--- @param targetTable table Estrutura a ser validada
--- @param currentPath string Caminho atual para rastrear chaves aninhadas
--- @param missingKeys table Lista de chaves faltantes
--- @param languageId string ID do idioma sendo validado
local function validateTranslationStructure(baseTable, targetTable, currentPath, missingKeys, languageId)
    for key, value in pairs(baseTable) do
        local fullPath = currentPath == "" and key or (currentPath .. "." .. key)

        if targetTable[key] == nil then
            -- Chave completamente ausente
            table.insert(missingKeys, fullPath)
        elseif type(value) == "table" and type(targetTable[key]) == "table" then
            -- Ambos s√£o tabelas, validar recursivamente
            validateTranslationStructure(value, targetTable[key], fullPath, missingKeys, languageId)
        elseif type(value) == "table" and type(targetTable[key]) ~= "table" then
            -- Base √© tabela mas target n√£o √© - estrutura incorreta
            table.insert(missingKeys, fullPath .. " (estrutura incorreta - esperado tabela)")
        end
        -- Se ambos s√£o valores (strings), ent√£o est√° OK
    end
end

--- Executa valida√ß√£o completa das tradu√ß√µes no modo DEV
--- @param baseLanguageId string ID do idioma base para compara√ß√£o
local function validateTranslations(baseLanguageId)
    if not DEV then
        return -- S√≥ executa no modo DEV
    end

    Logger.info(
        "localization_init.validation.start",
        "[LocalizationInit] Iniciando valida√ß√£o de tradu√ß√µes (modo DEV) - Base: " .. baseLanguageId
    )

    -- Carrega tradu√ß√£o base (pt_BR)
    local basePath = "src.data.translations." .. baseLanguageId
    local success, baseTranslations = pcall(require, basePath)

    if not success then
        Logger.error(
            "localization_init.validation.base_error",
            "[LocalizationInit] Erro ao carregar tradu√ß√µes base (" ..
            baseLanguageId .. "): " .. tostring(baseTranslations)
        )
        return
    end

    -- Lista de idiomas dispon√≠veis para validar
    local availableLanguages = { "en" } -- Adicionar outros idiomas aqui conforme necess√°rio

    local totalMissingKeys = 0
    local hasAnyMissingKeys = false

    for _, languageId in ipairs(availableLanguages) do
        if languageId ~= baseLanguageId then
            Logger.info(
                "localization_init.validation.check",
                "[LocalizationInit] Validando tradu√ß√µes: " .. languageId .. " contra " .. baseLanguageId
            )

            -- Carrega tradu√ß√£o do idioma sendo validado
            local targetPath = "src.data.translations." .. languageId
            local targetSuccess, targetTranslations = pcall(require, targetPath)

            if not targetSuccess then
                Logger.warn(
                    "localization_init.validation.target_error",
                    "[LocalizationInit] Erro ao carregar tradu√ß√µes de " ..
                    languageId .. ": " .. tostring(targetTranslations)
                )
            else
                -- Executa valida√ß√£o
                local missingKeys = {}
                validateTranslationStructure(baseTranslations, targetTranslations, "", missingKeys, languageId)

                if #missingKeys > 0 then
                    hasAnyMissingKeys = true
                    totalMissingKeys = totalMissingKeys + #missingKeys

                    Logger.warn(
                        "localization_init.validation.missing_keys",
                        string.format(
                            "[LocalizationInit] ‚ö†Ô∏è  TRADU√á√ïES FALTANTES em %s (%d chaves):",
                            languageId, #missingKeys
                        )
                    )

                    -- Log detalhado das chaves faltantes (agrupadas por categoria)
                    local categorizedKeys = {}
                    for _, missingKey in ipairs(missingKeys) do
                        local category = missingKey:match("^([^%.]+)")
                        category = category or "unknown"

                        if not categorizedKeys[category] then
                            categorizedKeys[category] = {}
                        end
                        table.insert(categorizedKeys[category], missingKey)
                    end

                    -- Exibe chaves faltantes organizadas por categoria
                    for category, keys in pairs(categorizedKeys) do
                        Logger.warn(
                            "localization_init.validation.category",
                            string.format("[LocalizationInit]   üìÅ %s (%d):", category, #keys)
                        )

                        for _, key in ipairs(keys) do
                            Logger.warn(
                                "localization_init.validation.missing_key",
                                "[LocalizationInit]     ‚ùå " .. key
                            )
                        end
                    end
                else
                    Logger.info(
                        "localization_init.validation.complete",
                        "[LocalizationInit] ‚úÖ " .. languageId .. " - Todas as tradu√ß√µes est√£o presentes!"
                    )
                end
            end
        end
    end

    -- Resumo final
    if hasAnyMissingKeys then
        Logger.warn(
            "localization_init.validation.summary",
            string.format(
                "[LocalizationInit] üìä RESUMO DA VALIDA√á√ÉO: %d chaves faltantes encontradas no total",
                totalMissingKeys
            )
        )
        Logger.warn(
            "localization_init.validation.recommendation",
            "[LocalizationInit] üí° Recomenda√ß√£o: Adicione as chaves faltantes nos arquivos de tradu√ß√£o correspondentes"
        )
    else
        Logger.info(
            "localization_init.validation.all_complete",
            "[LocalizationInit] üéâ Todas as tradu√ß√µes est√£o completas! Nenhuma chave faltante encontrada."
        )
    end
end

--- Inicializa o sistema de localiza√ß√£o global
local function initializeLocalization()
    Logger.info(
        "localization_init.initialize.start",
        "[LocalizationInit] Inicializando sistema de localiza√ß√£o global..."
    )

    --- Fun√ß√£o global principal para obter tradu√ß√µes
    --- @param key string chave da tradu√ß√£o
    --- @param params table|nil Par√¢metros para interpola√ß√£o (opcional)
    --- @return string translation A tradu√ß√£o encontrada
    _G._T = function(key, params)
        return LocalizationHelpers.getText(key, params)
    end

    --- Fun√ß√£o global para formata√ß√£o com par√¢metros (alias de _T)
    --- @param key string chave da tradu√ß√£o
    --- @param params table Par√¢metros obrigat√≥rios para interpola√ß√£o
    --- @return string translation A tradu√ß√£o formatada
    _G._P = function(key, params)
        return LocalizationHelpers.getText(key, params)
    end

    --- Fun√ß√£o global para obter tradu√ß√µes num√©ricas/plurais (future-proofing)
    --- @param key string chave da tradu√ß√£o
    --- @param count number N√∫mero para determinar forma plural
    --- @param params table|nil Par√¢metros adicionais para interpola√ß√£o
    --- @return string translation A tradu√ß√£o na forma adequada
    _G._N = function(key, count, params)
        -- Por enquanto, implementa√ß√£o simples
        -- No futuro, pode incluir l√≥gica de pluraliza√ß√£o
        local finalParams = params or {}
        finalParams.count = count
        return LocalizationHelpers.getText(key, finalParams)
    end

    --- Fun√ß√£o global para definir idioma
    --- @param languageId "pt_BR"|"en" ID do idioma
    --- @return boolean success Se a mudan√ßa foi bem-sucedida
    _G.SetLanguage = function(languageId)
        return LocalizationHelpers.setLanguage(languageId)
    end

    --- Fun√ß√£o global para obter idioma atual
    --- @return "pt_BR"|"en" currentLanguage
    _G.GetCurrentLanguage = function()
        return LocalizationHelpers.getCurrentLanguage()
    end

    --- Disponibiliza m√≥dulo de helpers globalmente para uso avan√ßado
    _G.LocalizationHelpers = LocalizationHelpers

    Logger.info("localization_init.complete", "[LocalizationInit] Sistema de localiza√ß√£o inicializado globalmente")
    Logger.info(
        "localization_init.functions",
        "[LocalizationInit] Fun√ß√µes globais dispon√≠veis: _T(), _P(), _N(), SetLanguage(), GetCurrentLanguage()"
    )

    -- Executa valida√ß√£o no modo DEV
    validateTranslations("pt_BR")
end

--- Chama a inicializa√ß√£o
initializeLocalization()

return {
    initialize = initializeLocalization
}
