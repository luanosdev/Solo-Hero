-- src/controllers/spawn_controller.lua
--[[
    SISTEMA DE CONTROLE DE SPAWN ASS√çNCRONO COM THREADS

    O SpawnController implementa um sistema h√≠brido de spawns com processamento ass√≠ncrono usando coroutines,
    mantendo todas as funcionalidades originais mas com performance m√°xima atrav√©s de processamento distribu√≠do.

    üöÄ SISTEMA ASS√çNCRONO DE SPAWNS:

    1. PROCESSAMENTO DISTRIBU√çDO
       - Usa coroutines para distribuir spawns ao longo de m√∫ltiplos frames
       - Evita spikes de performance durante spawns massivos
       - Yield autom√°tico baseado em tempo de processamento por frame

    2. PRIORIZA√á√ÉO INTELIGENTE
       - Bosses: Prioridade m√°xima (processamento imediato)
       - MVPs: Alta prioridade (processamento r√°pido)
       - Spawns normais: Processamento distribu√≠do em batches

    3. M√âTRICAS E MONITORAMENTO
       - Tracking em tempo real de performance
       - Estat√≠sticas de throughput e yields
       - Health monitoring do sistema

    4. CONFIGURA√á√ÉO DIN√ÇMICA
       - Ajuste de par√¢metros em runtime
       - Limites adaptativos baseados na performance
       - Fallback para sistema legacy se necess√°rio

    ‚ú® FUNCIONALIDADES MANTIDAS (Sistema de Controle por Boss):

    O SpawnController mant√©m o sistema inteligente de controle de spawns baseado na presen√ßa de bosses:

    ‚ú® FUNCIONALIDADES PRINCIPAIS:

    1. PAUSA AUTOM√ÅTICA DE SPAWNS
       - Quando um boss √© spawnado, todos os spawns (major, minor, MVP) s√£o pausados
       - A fila de spawns continua sendo processada para n√£o perder inimigos j√° na fila
       - Novos spawns n√£o s√£o adicionados √† fila enquanto h√° boss ativo

    2. CONTROLE DE TEMPO DE PAUSA
       - O sistema registra quando a pausa come√ßou (pauseStartTime)
       - Calcula o tempo total de pausa acumulado (totalPauseTime)
       - Ajusta todos os timers de spawn baseado no tempo pausado

    3. DETEC√á√ÉO DE √öLTIMO BOSS
       - Verifica se √© o √∫ltimo boss configurado no worldConfig.bossConfig.spawnTimes
       - Se for o √∫ltimo boss, ap√≥s sua morte os spawns s√£o pausados permanentemente
       - Se n√£o for o √∫ltimo boss, os spawns s√£o retomados com timers ajustados

    4. SISTEMA DE LOGS
       - Registra quando spawns s√£o pausados/retomados
       - Informa se √© o √∫ltimo boss
       - Mostra tempo de pausa e ajustes nos timers

    5. FUN√á√ïES DE DEBUG
       - getSpawnQueueInfo() retorna estado completo do sistema
       - testBossSpawnControl() permite testar a funcionalidade
       - EnemyManager:getDebugInfo() mostra informa√ß√µes dos bosses ativos

    ‚öôÔ∏è CONFIGURA√á√ÉO:

    Para usar o sistema, configure os bosses no worldConfig.bossConfig.spawnTimes:

    bossConfig = {
        spawnTimes = {
            { time = 300, class = BossClass1, unitType = "boss_type_1", rank = "E" },
            { time = 600, class = BossClass2, unitType = "boss_type_2", rank = "D" },
            -- ... mais bosses
        }
    }

    üîß VARI√ÅVEIS DE CONTROLE:

    - isSpawnPaused: Boolean que indica se spawns est√£o pausados temporariamente
    - isPermanentlyPaused: Boolean que indica se spawns est√£o pausados permanentemente
    - pauseStartTime: Timestamp quando a pausa atual come√ßou
    - totalPauseTime: Tempo total acumulado de todas as pausas
    - nextBossIndex: √çndice do pr√≥ximo boss a ser spawnado

    üéØ COMPORTAMENTO ESPERADO:

    1. Jogo inicia com spawns normais
    2. Primeiro boss spawna ‚Üí spawns pausam
    3. Boss morre ‚Üí spawns retomam com timers ajustados
    4. Segundo boss spawna ‚Üí spawns pausam novamente
    5. Segundo boss morre ‚Üí spawns retomam (se n√£o for √∫ltimo)
    6. √öltimo boss spawna ‚Üí spawns pausam
    7. √öltimo boss morre ‚Üí spawns pausam PERMANENTEMENTE
]]

local Camera = require("src.config.camera")
local Logger = require("src.libs.logger")
local Constants = require("src.config.constants")
local AsyncSpawnProcessor = require("src.controllers.async_spawn_processor")

---@class SpawnController
---@field enemyManager EnemyManager
---@field playerManager PlayerManager
---@field mapManager MapManager
---@field worldConfig table|nil
---@field currentCycleIndex number
---@field gameTimer number
---@field timeInCurrentCycle number
---@field nextMajorSpawnTime number
---@field nextMinorSpawnTime number
---@field nextMVPSpawnTime number
---@field nextBossIndex number
---@field spawnQueue SpawnRequest[] Fila de spawns pendentes para distribuir ao longo de m√∫ltiplos frames (DEPRECATED - usado apenas para compatibilidade)
---@field maxSpawnsPerFrame number N√∫mero m√°ximo de inimigos a spawnar por frame
---@field isSpawnPaused boolean Indica se os spawns est√£o pausados devido a boss ativo
---@field pauseStartTime number Tempo quando a pausa come√ßou
---@field totalPauseTime number Tempo total acumulado de pausa
---@field isPermanentlyPaused boolean Indica se os spawns foram pausados permanentemente (√∫ltimo boss)
---@field asyncProcessor AsyncSpawnProcessor Processador ass√≠ncrono de spawns
local SpawnController = {}
SpawnController.__index = SpawnController

---@param enemyManager EnemyManager
---@param playerManager PlayerManager
---@param mapManager MapManager
function SpawnController:new(enemyManager, playerManager, mapManager)
    local instance = setmetatable({}, SpawnController)
    instance.enemyManager = enemyManager
    instance.playerManager = playerManager
    instance.mapManager = mapManager

    -- Estado de Ciclo e Tempo
    instance.worldConfig = nil
    instance.currentCycleIndex = 1
    instance.gameTimer = 0
    instance.timeInCurrentCycle = 0

    -- Timers de Spawn (baseados no gameTimer)
    instance.nextMajorSpawnTime = 0
    instance.nextMinorSpawnTime = 0
    instance.nextMVPSpawnTime = 0
    instance.nextBossIndex = 1

    -- Sistema de Spawn Distribu√≠do (Mantido para compatibilidade)
    instance.spawnQueue = {}
    instance.maxSpawnsPerFrame = Constants.SPAWN_OPTIMIZATION.MAX_SPAWNS_PER_FRAME

    -- Controle de Pausa por Boss
    instance.isSpawnPaused = false
    instance.pauseStartTime = 0
    instance.totalPauseTime = 0
    instance.isPermanentlyPaused = false

    -- Processador Ass√≠ncrono de Spawns
    instance.asyncProcessor = AsyncSpawnProcessor:new()

    return instance
end

---@param hordeConfig PortalDefinition
function SpawnController:setup(hordeConfig)
    self.worldConfig = hordeConfig
    self.gameTimer = 0
    self.timeInCurrentCycle = 0
    self.currentCycleIndex = 1
    self.nextBossIndex = 1

    -- Limpa a fila de spawn de sess√µes anteriores
    self.spawnQueue = {}

    -- Limpa o processador ass√≠ncrono
    if self.asyncProcessor then
        self.asyncProcessor:clear()
    else
        self.asyncProcessor = AsyncSpawnProcessor:new()
    end

    if not self.worldConfig or not self.worldConfig.cycles or #self.worldConfig.cycles == 0 then
        error("Erro [SpawnController:setup]: Configura√ß√£o de horda inv√°lida ou vazia fornecida.")
    end
    if not self.worldConfig.mvpConfig then
        error("Erro [SpawnController:setup]: Configura√ß√£o de horda n√£o possui 'mvpConfig'.")
    end

    local firstCycle = self.worldConfig.cycles[1]
    if not firstCycle or not firstCycle.majorSpawn or not firstCycle.minorSpawn then
        error("Erro [SpawnController:setup]: Primeiro ciclo inv√°lido ou sem configura√ß√£o de spawn.")
    end

    self.nextMajorSpawnTime = firstCycle.majorSpawn.interval
    self.nextMinorSpawnTime = self:calculateMinorSpawnInterval(firstCycle)
    self.nextMVPSpawnTime = self.worldConfig.mvpConfig.spawnInterval

    local mapRank = self.worldConfig.mapRank or "E"
    Logger.info(
        "[SpawnController]",
        string.format(
            "SpawnController inicializado com Horda Config. Rank Mapa: %s. %d ciclo(s). Max spawns/frame: %d. Bosses: %d",
            mapRank,
            #self.worldConfig.cycles,
            self.maxSpawnsPerFrame,
            #self.worldConfig.bossConfig.spawnTimes
        )
    )
end

---@param dt number
function SpawnController:update(dt)
    self.gameTimer = self.gameTimer + dt
    self.timeInCurrentCycle = self.timeInCurrentCycle + dt

    -- Atualiza o processador ass√≠ncrono
    if self.asyncProcessor then
        self.asyncProcessor:update(dt)
    end

    -- Verifica se h√° boss ativo e ajusta o estado de pausa
    self:updateBossSpawnControl()

    -- Se os spawns est√£o pausados permanentemente, n√£o executa nada
    if self.isPermanentlyPaused then
        return
    end

    -- Processa spawns do sistema ass√≠ncrono PRIMEIRO
    self:processAsyncSpawns()

    -- Processa a fila de spawn distribu√≠do legacy (mesmo em pausa, para n√£o perder spawns j√° na fila)
    self:processSpawnQueue()

    -- Se spawns est√£o pausados, n√£o executa novos spawns
    if self.isSpawnPaused then
        return
    end

    -- MVP Spawn
    if self.gameTimer >= self.nextMVPSpawnTime then
        self:spawnMVP()
        self.nextMVPSpawnTime = self.gameTimer + self.worldConfig.mvpConfig.spawnInterval
    end

    -- Boss Spawn
    if self.worldConfig.bossConfig and self.worldConfig.bossConfig.spawnTimes then
        local nextBoss = self.worldConfig.bossConfig.spawnTimes[self.nextBossIndex]
        if nextBoss and self.gameTimer >= nextBoss.time then
            local spawnX, spawnY = self:calculateSpawnPosition()
            self.enemyManager:spawnBoss(nextBoss, { x = spawnX, y = spawnY })
            self.nextBossIndex = self.nextBossIndex + 1

            -- Verifica se √© o √∫ltimo boss
            if self.nextBossIndex > #self.worldConfig.bossConfig.spawnTimes then
                Logger.info(
                    "[SpawnController:update]",
                    "√öltimo boss spawnado. Spawns ser√£o pausados permanentemente ap√≥s sua morte."
                )
            end
        end
    end

    -- L√≥gica de Ciclos
    local currentCycle = self.worldConfig.cycles[self.currentCycleIndex]
    if not currentCycle then
        return
    end

    if self.timeInCurrentCycle >= currentCycle.duration and self.currentCycleIndex < #self.worldConfig.cycles then
        self.currentCycleIndex = self.currentCycleIndex + 1
        self.timeInCurrentCycle = self.timeInCurrentCycle - currentCycle.duration
        currentCycle = self.worldConfig.cycles[self.currentCycleIndex]
        Logger.info(
            "[SpawnController]",
            string.format("Entrando no Ciclo %d no tempo %.2f", self.currentCycleIndex, self.gameTimer)
        )

        -- Ajusta os timers considerando o tempo de pausa
        self.nextMajorSpawnTime = self.gameTimer + currentCycle.majorSpawn.interval
        self.nextMinorSpawnTime = self.gameTimer + self:calculateMinorSpawnInterval(currentCycle)
    end

    -- Major Spawn
    if self.gameTimer >= self.nextMajorSpawnTime then
        self:handleMajorSpawn(currentCycle)
        self.nextMajorSpawnTime = self.gameTimer + currentCycle.majorSpawn.interval
    end

    -- Minor Spawn
    if self.gameTimer >= self.nextMinorSpawnTime then
        self:handleMinorSpawn(currentCycle)
        local nextInterval = self:calculateMinorSpawnInterval(currentCycle)
        self.nextMinorSpawnTime = self.gameTimer + nextInterval
    end
end

--- Processa spawns do sistema ass√≠ncrono
function SpawnController:processAsyncSpawns()
    if not self.asyncProcessor then return end

    -- Obt√©m spawns processados do sistema ass√≠ncrono
    local processedSpawns = self.asyncProcessor:getProcessedSpawns(self.maxSpawnsPerFrame)
    local spawnsThisFrame = 0

    for _, spawn in ipairs(processedSpawns) do
        if not self.enemyManager:canSpawnMoreEnemies() then
            Logger.warn("[SpawnController:processAsyncSpawns]", "Limite m√°ximo de inimigos atingido.")
            break
        end

        self.enemyManager:spawnSpecificEnemy(
            spawn.enemyClass,
            spawn.position,
            spawn.options
        )
        spawnsThisFrame = spawnsThisFrame + 1
    end

    if spawnsThisFrame > 0 then
        Logger.debug(
            "[SpawnController:processAsyncSpawns]",
            string.format("Executados %d spawns ass√≠ncronos.", spawnsThisFrame)
        )
    end
end

--- Processa a fila de spawn distribu√≠do legacy, limitando spawns por frame
function SpawnController:processSpawnQueue()
    local spawnsThisFrame = 0

    while #self.spawnQueue > 0 and spawnsThisFrame < self.maxSpawnsPerFrame do
        if not self.enemyManager:canSpawnMoreEnemies() then
            Logger.warn("[SpawnController:processSpawnQueue]", "Limite m√°ximo de inimigos atingido.")
            break
        end

        local spawnRequest = table.remove(self.spawnQueue, 1)
        if spawnRequest and spawnRequest.enemyClass then
            self.enemyManager:spawnSpecificEnemy(
                spawnRequest.enemyClass,
                spawnRequest.position,
                spawnRequest.options
            )
            spawnsThisFrame = spawnsThisFrame + 1
        end
    end

    if spawnsThisFrame > 0 then
        Logger.debug(
            "[SpawnController:processSpawnQueue]",
            string.format("Processados %d spawns legacy. %d restantes na fila.", spawnsThisFrame, #self.spawnQueue)
        )
    end
end

--- Adiciona um spawn request √† fila (LEGACY - mantido para compatibilidade)
---@param enemyClass table
---@param position { x: number, y: number }
---@param options table|nil
function SpawnController:addToSpawnQueue(enemyClass, position, options)
    table.insert(self.spawnQueue, {
        enemyClass = enemyClass,
        position = position,
        options = options
    })
end

--- Adiciona um spawn request ao sistema ass√≠ncrono
---@param enemyClass table
---@param position { x: number, y: number }
---@param options table|nil
function SpawnController:addAsyncSpawnRequest(enemyClass, position, options)
    if self.asyncProcessor then
        self.asyncProcessor:addSpawnRequest(enemyClass, position, options)
    else
        -- Fallback para sistema legacy
        self:addToSpawnQueue(enemyClass, position, options)
    end
end

---@param currentCycle HordeCycle
function SpawnController:handleMajorSpawn(currentCycle)
    local spawnConfig = currentCycle.majorSpawn
    local minutesPassed = self.gameTimer / 60
    local countToSpawn = math.floor(spawnConfig.baseCount +
        (spawnConfig.baseCount * spawnConfig.countScalePerMin * minutesPassed))

    Logger.debug(
        "[SpawnController:handleMajorSpawn]",
        string.format(
            "Major Spawn (Ciclo %d) no tempo %.2f: Adicionando %d inimigos ao processamento ass√≠ncrono.",
            self.currentCycleIndex,
            self.gameTimer,
            countToSpawn
        )
    )

    -- Adiciona spawns ao sistema ass√≠ncrono
    for _ = 1, countToSpawn do
        local enemyClass = self:selectEnemyFromList(currentCycle.allowedEnemies)
        if enemyClass then
            local spawnX, spawnY = self:calculateSpawnPosition()
            self:addAsyncSpawnRequest(enemyClass, { x = spawnX, y = spawnY }, nil)
        end
    end
end

---@param currentCycle HordeCycle
function SpawnController:handleMinorSpawn(currentCycle)
    local spawnConfig = currentCycle.minorSpawn
    local countToSpawn = spawnConfig.count

    Logger.debug("[SpawnController:handleMinorSpawn]",
        string.format("Minor Spawn (Ciclo %d) no tempo %.2f: Adicionando %d inimigos ao processamento ass√≠ncrono.",
            self.currentCycleIndex, self.gameTimer, countToSpawn))

    -- Adiciona spawns ao sistema ass√≠ncrono
    for _ = 1, countToSpawn do
        local enemyClass = self:selectEnemyFromList(currentCycle.allowedEnemies)
        if enemyClass then
            local spawnX, spawnY = self:calculateSpawnPosition()
            self:addAsyncSpawnRequest(enemyClass, { x = spawnX, y = spawnY }, nil)
        end
    end
end

function SpawnController:spawnMVP()
    local currentCycle = self.worldConfig.cycles[self.currentCycleIndex]
    if not currentCycle then return end

    local enemyClass = self:selectEnemyFromList(currentCycle.allowedEnemies)
    if not enemyClass then return end

    local spawnX, spawnY = self:calculateSpawnPosition()
    -- MVPs s√£o adicionados ao sistema ass√≠ncrono com alta prioridade (processamento imediato)
    Logger.debug("[SpawnController:spawnMVP]", "Adicionando MVP ao processamento ass√≠ncrono (prioridade alta).")
    self:addAsyncSpawnRequest(enemyClass, { x = spawnX, y = spawnY }, { isMVP = true })
end

---@param cycleConfig HordeCycle
function SpawnController:calculateMinorSpawnInterval(cycleConfig)
    local spawnConfig = cycleConfig.minorSpawn
    local minutesPassed = self.gameTimer / 60
    local interval = spawnConfig.baseInterval - (spawnConfig.intervalReductionPerMin * minutesPassed)
    return math.max(interval, spawnConfig.minInterval)
end

---@param enemyList AllowedEnemy[]
function SpawnController:selectEnemyFromList(enemyList)
    if not enemyList or #enemyList == 0 then
        Logger.warn("[SpawnController:selectEnemyFromList]", "Tentando selecionar inimigo de uma lista vazia.")
        return nil
    end

    local totalWeight = 0
    for _, enemyType in ipairs(enemyList) do
        totalWeight = totalWeight + (enemyType.weight or 1)
    end

    if totalWeight <= 0 then
        Logger.warn("[SpawnController:selectEnemyFromList]", "Peso total zero ou negativo na lista de inimigos.")
        return #enemyList > 0 and enemyList[1].class or nil
    end

    local randomValue = math.random() * totalWeight

    for _, enemyType in ipairs(enemyList) do
        randomValue = randomValue - (enemyType.weight or 1)
        if randomValue <= 0 then
            return enemyType.class
        end
    end

    Logger.warn("[SpawnController:selectEnemyFromList]",
        "Falha ao selecionar inimigo por peso, retornando o primeiro.")
    return #enemyList > 0 and enemyList[1].class or nil
end

function SpawnController:calculateSpawnPosition()
    local camX, camY, camWidth, camHeight = Camera:getViewPort()
    local sprite = self.playerManager:getPlayerSprite()
    local playerVel = sprite.velocity
    local buffer = 150

    local spawnZones = {
        top = { x = camX - buffer, y = camY - buffer, width = camWidth + buffer * 2, height = buffer },
        bottom = { x = camX - buffer, y = camY + camHeight, width = camWidth + buffer * 2, height = buffer },
        left = { x = camX - buffer, y = camY, width = buffer, height = camHeight },
        right = { x = camX + camWidth, y = camY, width = buffer, height = camHeight }
    }

    local weights = { top = 1, bottom = 1, left = 1, right = 1 }
    local isMoving = playerVel and (playerVel.x ~= 0 or playerVel.y ~= 0)

    if isMoving and playerVel then
        local movementBias = 4
        if playerVel.y < -0.1 then weights.top = weights.top + movementBias end
        if playerVel.y > 0.1 then weights.bottom = weights.bottom + movementBias end
        if playerVel.x < -0.1 then weights.left = weights.left + movementBias end
        if playerVel.x > 0.1 then weights.right = weights.right + movementBias end
    end

    local totalWeight = weights.top + weights.bottom + weights.left + weights.right
    local randomVal = math.random() * totalWeight
    local selectedZoneKey

    if randomVal <= weights.top then
        selectedZoneKey = "top"
    elseif randomVal <= weights.top + weights.bottom then
        selectedZoneKey = "bottom"
    elseif randomVal <= weights.top + weights.bottom + weights.left then
        selectedZoneKey = "left"
    else
        selectedZoneKey = "right"
    end

    local selectedZone = spawnZones[selectedZoneKey]
    local spawnX = math.random(selectedZone.x, selectedZone.x + selectedZone.width)
    local spawnY = math.random(selectedZone.y, selectedZone.y + selectedZone.height)

    return spawnX, spawnY
end

--- Ajusta o limite de spawns por frame para fine-tuning de performance
---@param newLimit number Novo limite de spawns por frame
function SpawnController:setMaxSpawnsPerFrame(newLimit)
    local minLimit = Constants.SPAWN_OPTIMIZATION.MIN_SPAWNS_PER_FRAME
    local maxLimit = Constants.SPAWN_OPTIMIZATION.MAX_SPAWNS_PER_FRAME_LIMIT

    if newLimit and newLimit >= minLimit and newLimit <= maxLimit then
        self.maxSpawnsPerFrame = newLimit
        Logger.info("[SpawnController:setMaxSpawnsPerFrame]",
            string.format("Limite de spawns por frame ajustado para: %d", newLimit))
    else
        Logger.warn("[SpawnController:setMaxSpawnsPerFrame]",
            string.format("Limite inv√°lido (%s). Deve ser entre %d e %d.",
                tostring(newLimit), minLimit, maxLimit))
    end
end

--- Verifica se h√° boss ativo e controla o estado de pausa dos spawns
function SpawnController:updateBossSpawnControl()
    -- Verifica se h√° boss ativo
    local hasBossActive = false
    for _, enemy in ipairs(self.enemyManager.enemies) do
        if enemy.isBoss and enemy.isAlive then
            hasBossActive = true
            break
        end
    end

    -- Se h√° boss ativo e n√£o estava pausado, inicia a pausa
    if hasBossActive and not self.isSpawnPaused then
        self:pauseSpawns()
        -- Se n√£o h√° boss ativo e estava pausado, retoma os spawns
    elseif not hasBossActive and self.isSpawnPaused then
        self:resumeSpawns()
    end
end

--- Pausa os spawns devido a boss ativo
function SpawnController:pauseSpawns()
    self.isSpawnPaused = true
    self.pauseStartTime = self.gameTimer

    Logger.info("[SpawnController:pauseSpawns]",
        string.format("Spawns pausados devido a boss ativo no tempo %.2f", self.gameTimer))
end

--- Retoma os spawns ap√≥s boss morrer
function SpawnController:resumeSpawns()
    if self.isPermanentlyPaused then
        return -- N√£o retoma se estiver permanentemente pausado
    end

    -- Calcula o tempo de pausa
    local pauseDuration = self.gameTimer - self.pauseStartTime
    self.totalPauseTime = self.totalPauseTime + pauseDuration

    -- Verifica se √© o √∫ltimo boss (n√£o h√° mais bosses para spawnar)
    local isLastBoss = true
    if self.worldConfig.bossConfig and self.worldConfig.bossConfig.spawnTimes then
        isLastBoss = self.nextBossIndex > #self.worldConfig.bossConfig.spawnTimes
    end

    if isLastBoss then
        -- √öltimo boss morreu, pausa permanentemente
        self.isPermanentlyPaused = true
        self.isSpawnPaused = false -- Reseta o flag tempor√°rio

        Logger.info("[SpawnController:resumeSpawns]",
            string.format("√öltimo boss morreu. Spawns pausados permanentemente ap√≥s %.2f segundos de pausa total.",
                pauseDuration))
    else
        -- Ajusta os timers de spawn baseado no tempo de pausa
        self.nextMajorSpawnTime = self.nextMajorSpawnTime + pauseDuration
        self.nextMinorSpawnTime = self.nextMinorSpawnTime + pauseDuration
        self.nextMVPSpawnTime = self.nextMVPSpawnTime + pauseDuration

        self.isSpawnPaused = false

        Logger.info("[SpawnController:resumeSpawns]",
            string.format(
                "Spawns retomados ap√≥s %.2f segundos de pausa. Timers ajustados. Pausa total acumulada: %.2f segundos.",
                pauseDuration, self.totalPauseTime))
    end
end

--- Retorna informa√ß√µes sobre o estado atual do sistema de spawn
---@return table Estado do sistema contendo informa√ß√µes de filas legacy e ass√≠ncrona
function SpawnController:getSpawnQueueInfo()
    local asyncStatus = {}
    if self.asyncProcessor then
        asyncStatus = self.asyncProcessor:getStatus()
    end

    return {
        -- Sistema Legacy
        legacyQueue = {
            count = #self.spawnQueue,
            maxPerFrame = self.maxSpawnsPerFrame
        },
        -- Sistema Ass√≠ncrono
        asyncSystem = asyncStatus,
        -- Estado Global
        isPaused = self.isSpawnPaused,
        isPermanentlyPaused = self.isPermanentlyPaused,
        totalPauseTime = self.totalPauseTime,
        gameTimer = self.gameTimer
    }
end

--- Retorna m√©tricas detalhadas de performance do sistema de spawn
---@return table M√©tricas de performance
function SpawnController:getPerformanceMetrics()
    local metrics = {
        systemType = "AsyncSpawnController",
        legacyQueueCount = #self.spawnQueue,
        asyncMetrics = nil,
        totalPauseTime = self.totalPauseTime,
        gameTimer = self.gameTimer
    }

    if self.asyncProcessor then
        local asyncStatus = self.asyncProcessor:getStatus()
        metrics.asyncMetrics = asyncStatus.metrics
        metrics.asyncPendingRequests = asyncStatus.pendingRequests
        metrics.asyncProcessedSpawns = asyncStatus.processedSpawns
        metrics.activeCoroutines = asyncStatus.activeCoroutines
    end

    return metrics
end

--- Fun√ß√£o de teste para verificar funcionalidade do controle de spawn por boss
---@param forceSpawnBoss boolean Se true, for√ßa o spawn de um boss para teste
function SpawnController:testBossSpawnControl(forceSpawnBoss)
    if forceSpawnBoss then
        -- For√ßa o spawn de um boss para teste
        local currentCycle = self.worldConfig.cycles[self.currentCycleIndex]
        if currentCycle and currentCycle.allowedEnemies and #currentCycle.allowedEnemies > 0 then
            local enemyClass = currentCycle.allowedEnemies[1].class
            local spawnX, spawnY = self:calculateSpawnPosition()

            -- Cria um boss tempor√°rio para teste
            local testBoss = {
                time = self.gameTimer + 5, -- Spawn em 5 segundos
                class = enemyClass,
                unitType = currentCycle.allowedEnemies[1].unitType,
                rank = self.worldConfig.mapRank or "E"
            }

            Logger.info("[SpawnController:testBossSpawnControl]",
                "For√ßando spawn de boss para teste em 5 segundos...")

            -- Simula o spawn do boss
            self.enemyManager:spawnBoss(testBoss, { x = spawnX, y = spawnY })
        end
    end

    -- Retorna informa√ß√µes de debug
    local debugInfo = {
        isSpawnPaused = self.isSpawnPaused,
        isPermanentlyPaused = self.isPermanentlyPaused,
        totalPauseTime = self.totalPauseTime,
        gameTimer = self.gameTimer,
        legacySpawnQueueCount = #self.spawnQueue,
        nextBossIndex = self.nextBossIndex,
        asyncSpawnSystem = {}
    }

    -- Adiciona informa√ß√µes do sistema ass√≠ncrono
    if self.asyncProcessor then
        local asyncStatus = self.asyncProcessor:getStatus()
        debugInfo.asyncSpawnSystem = {
            pendingRequests = asyncStatus.pendingRequests,
            processedSpawns = asyncStatus.processedSpawns,
            activeCoroutines = asyncStatus.activeCoroutines,
            totalProcessed = asyncStatus.metrics.totalProcessed,
            totalYields = asyncStatus.metrics.totalYields,
            avgProcessTime = asyncStatus.metrics.avgProcessTime
        }
    end

    if self.worldConfig.bossConfig and self.worldConfig.bossConfig.spawnTimes then
        debugInfo.totalBossesConfigured = #self.worldConfig.bossConfig.spawnTimes
        debugInfo.bossesRemaining = #self.worldConfig.bossConfig.spawnTimes - (self.nextBossIndex - 1)
    end

    Logger.info("[SpawnController:testBossSpawnControl]",
        string.format(
            "Estado atual: Pausado=%s, PermanentePausado=%s, TempoPausa=%.2f, FilaLegacy=%d, AsyncPending=%d, AsyncProcessed=%d",
            tostring(debugInfo.isSpawnPaused),
            tostring(debugInfo.isPermanentlyPaused),
            debugInfo.totalPauseTime,
            debugInfo.legacySpawnQueueCount,
            debugInfo.asyncSpawnSystem.pendingRequests or 0,
            debugInfo.asyncSpawnSystem.processedSpawns or 0))

    return debugInfo
end

--- Configura par√¢metros de performance do sistema ass√≠ncrono em runtime
---@param config table Configura√ß√µes: maxProcessTimePerFrame, yieldCheckInterval, batchSize
function SpawnController:configureAsyncSystem(config)
    if self.asyncProcessor then
        self.asyncProcessor:updateConfig(config)
        Logger.info("[SpawnController:configureAsyncSystem]", "Sistema ass√≠ncrono reconfigurado")
    else
        Logger.warn("[SpawnController:configureAsyncSystem]",
            "Tentativa de configurar sistema ass√≠ncrono n√£o inicializado")
    end
end

--- Obt√©m estat√≠sticas de performance em tempo real
---@return table Estat√≠sticas incluindo FPS impact, throughput, etc.
function SpawnController:getRealtimeStats()
    local stats = {
        frameTime = love.timer.getDelta() * 1000, -- ms
        fps = love.timer.getFPS(),
        spawnThroughput = 0,
        systemHealth = "healthy"
    }

    if self.asyncProcessor then
        local asyncStatus = self.asyncProcessor:getStatus()
        local metrics = asyncStatus.metrics

        stats.spawnThroughput = metrics.totalProcessed / math.max(self.gameTimer, 1)
        stats.avgProcessTime = metrics.avgProcessTime
        stats.totalYields = metrics.totalYields
        stats.asyncLoad = asyncStatus.pendingRequests + asyncStatus.processedSpawns

        -- Determina health do sistema
        if metrics.frameProcessTime > 5.0 then
            stats.systemHealth = "overloaded"
        elseif metrics.frameProcessTime > 3.0 then
            stats.systemHealth = "stressed"
        elseif asyncStatus.pendingRequests > 100 then
            stats.systemHealth = "busy"
        end
    end

    return stats
end

--- For√ßa limpeza completa do sistema de spawn (usado ao sair de gameplay)
function SpawnController:cleanup()
    if self.asyncProcessor then
        self.asyncProcessor:clear()
        Logger.info("[SpawnController:cleanup]", "Sistema ass√≠ncrono limpo")
    end

    self.spawnQueue = {}
    self.isSpawnPaused = false
    self.isPermanentlyPaused = false
    self.totalPauseTime = 0

    Logger.info("[SpawnController:cleanup]", "SpawnController completamente limpo")
end


return SpawnController
